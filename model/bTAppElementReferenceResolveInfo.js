"use strict";
/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.93
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BTAppElementReferenceResolveInfo = void 0;
var BTAppElementReferenceResolveInfo = /** @class */ (function () {
    function BTAppElementReferenceResolveInfo() {
    }
    BTAppElementReferenceResolveInfo.getAttributeTypeMap = function () {
        return BTAppElementReferenceResolveInfo.attributeTypeMap;
    };
    BTAppElementReferenceResolveInfo.discriminator = undefined;
    BTAppElementReferenceResolveInfo.attributeTypeMap = [
        {
            "name": "targetElementMicroversionId",
            "baseName": "targetElementMicroversionId",
            "type": "string"
        },
        {
            "name": "resolvedElementMicroversionId",
            "baseName": "resolvedElementMicroversionId",
            "type": "string"
        },
        {
            "name": "revision",
            "baseName": "revision",
            "type": "string"
        },
        {
            "name": "changeId",
            "baseName": "changeId",
            "type": "string"
        },
        {
            "name": "targetDocumentId",
            "baseName": "targetDocumentId",
            "type": "string"
        },
        {
            "name": "targetElementId",
            "baseName": "targetElementId",
            "type": "string"
        },
        {
            "name": "targetConfiguration",
            "baseName": "targetConfiguration",
            "type": "string"
        },
        {
            "name": "targetVersionId",
            "baseName": "targetVersionId",
            "type": "string"
        },
        {
            "name": "isSketchOnly",
            "baseName": "isSketchOnly",
            "type": "boolean"
        },
        {
            "name": "sketchIds",
            "baseName": "sketchIds",
            "type": "Array<string>"
        },
        {
            "name": "idTag",
            "baseName": "idTag",
            "type": "string"
        },
        {
            "name": "partNumber",
            "baseName": "partNumber",
            "type": "string"
        },
        {
            "name": "referenceId",
            "baseName": "referenceId",
            "type": "string"
        },
        {
            "name": "targetDocumentMicroversionId",
            "baseName": "targetDocumentMicroversionId",
            "type": "string"
        },
        {
            "name": "isConfigurable",
            "baseName": "isConfigurable",
            "type": "boolean"
        },
        {
            "name": "resolvedDocumentMicroversionId",
            "baseName": "resolvedDocumentMicroversionId",
            "type": "string"
        },
        {
            "name": "idTagIsValid",
            "baseName": "idTagIsValid",
            "type": "boolean"
        },
        {
            "name": "trackNewVersions",
            "baseName": "trackNewVersions",
            "type": "boolean"
        },
        {
            "name": "errorCode",
            "baseName": "errorCode",
            "type": "number"
        },
        {
            "name": "errorValue",
            "baseName": "errorValue",
            "type": "BTAppElementReferenceResolveInfo.ErrorValueEnum"
        },
        {
            "name": "errorDescription",
            "baseName": "errorDescription",
            "type": "string"
        }
    ];
    return BTAppElementReferenceResolveInfo;
}());
exports.BTAppElementReferenceResolveInfo = BTAppElementReferenceResolveInfo;
(function (BTAppElementReferenceResolveInfo) {
    var ErrorValueEnum;
    (function (ErrorValueEnum) {
        ErrorValueEnum[ErrorValueEnum["OK"] = 'OK'] = "OK";
        ErrorValueEnum[ErrorValueEnum["TRANSACTIONCONFLICT"] = 'TRANSACTION_CONFLICT'] = "TRANSACTIONCONFLICT";
        ErrorValueEnum[ErrorValueEnum["NOTFOUND"] = 'NOT_FOUND'] = "NOTFOUND";
        ErrorValueEnum[ErrorValueEnum["INCONSISTENTCHANGES"] = 'INCONSISTENT_CHANGES'] = "INCONSISTENTCHANGES";
    })(ErrorValueEnum = BTAppElementReferenceResolveInfo.ErrorValueEnum || (BTAppElementReferenceResolveInfo.ErrorValueEnum = {}));
})(BTAppElementReferenceResolveInfo = exports.BTAppElementReferenceResolveInfo || (exports.BTAppElementReferenceResolveInfo = {}));
exports.BTAppElementReferenceResolveInfo = BTAppElementReferenceResolveInfo;
